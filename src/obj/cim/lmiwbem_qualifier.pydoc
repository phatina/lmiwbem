# ##### BEGIN LICENSE BLOCK #####
#
#   Copyright (C) 2014-2015, Peter Hatina <phatina@redhat.com>
#
#   This library is free software; you can redistribute it and/or modify
#   it under the terms of the GNU Lesser General Public License as
#   published by the Free Software Foundation, either version 2.1 of the
#   License, or (at your option) any later version.
#
#   This library is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#   GNU Lesser General Public License for more details.
#
#   You should have received a copy of the GNU Lesser General Public
#   License along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#   MA 02110-1301 USA
#
# ##### END LICENSE BLOCK #####


CIMQualifier_init = {
CIMQualifier(name, value, type=None, propagated=False, overridable=False, \
tosubclass=False, toinstance=False, translatable=False)

Args:
    name (str): Qualifier's name
    value: Qualifier's value
    type (str): Qualifier's type
    propagated (bool): True, if the qualifier is propadated; False otherwise
    overridable (bool): True, if the qualifier can be overridden;
        False otherwise
    tosubclass (bool): True, if the qualifier shall appear in subclass;
        False otherwise
    toinstance (bool): True, if the qualifier shall appear in instance;
        False otherwise
    translatable (bool): True, if the qualifier can be translated;
        False otherwise
}

# ------------------------------------------------------------------------------

CIMQualifier_repr = {
Returns:
    unicode: Pretty string of the object
}

# ------------------------------------------------------------------------------

CIMQualifier_copy = {
copy()

Returns:
    CIMQualifier: Copy of the object itself
}

# ------------------------------------------------------------------------------

CIMQualifier_tomof = {
tomof()

Returns:
    unicode: MOF representation of the object itself
}
